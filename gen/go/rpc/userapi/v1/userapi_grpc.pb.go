// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rpc/userapi/v1/userapi.proto

package userapiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_SendBid_FullMethodName = "/rpc.seacherapi.v1.User/SendBid"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// SendBid
	//
	// Send a bid to the user mev-commit node.
	SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (User_SendBidClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) SendBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (User_SendBidClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_SendBid_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userSendBidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_SendBidClient interface {
	Recv() (*PreConfirmation, error)
	grpc.ClientStream
}

type userSendBidClient struct {
	grpc.ClientStream
}

func (x *userSendBidClient) Recv() (*PreConfirmation, error) {
	m := new(PreConfirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// SendBid
	//
	// Send a bid to the user mev-commit node.
	SendBid(*Bid, User_SendBidServer) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) SendBid(*Bid, User_SendBidServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBid not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_SendBid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Bid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).SendBid(m, &userSendBidServer{stream})
}

type User_SendBidServer interface {
	Send(*PreConfirmation) error
	grpc.ServerStream
}

type userSendBidServer struct {
	grpc.ServerStream
}

func (x *userSendBidServer) Send(m *PreConfirmation) error {
	return x.ServerStream.SendMsg(m)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.seacherapi.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBid",
			Handler:       _User_SendBid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/userapi/v1/userapi.proto",
}
